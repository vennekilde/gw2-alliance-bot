// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for AccessType.
const (
	HOMEWORLD   AccessType = "HOME_WORLD"
	LINKEDWORLD AccessType = "LINKED_WORLD"
)

// Defines values for Status.
const (
	ACCESSDENIEDACCOUNTNOTLINKED      Status = "ACCESS_DENIED_ACCOUNT_NOT_LINKED"
	ACCESSDENIEDBANNED                Status = "ACCESS_DENIED_BANNED"
	ACCESSDENIEDEXPIRED               Status = "ACCESS_DENIED_EXPIRED"
	ACCESSDENIEDINVALIDWORLD          Status = "ACCESS_DENIED_INVALID_WORLD"
	ACCESSDENIEDREQUIREMENTNOTMET     Status = "ACCESS_DENIED_REQUIREMENT_NOT_MET"
	ACCESSDENIEDUNKNOWN               Status = "ACCESS_DENIED_UNKNOWN"
	ACCESSGRANTEDHOMEWORLD            Status = "ACCESS_GRANTED_HOME_WORLD"
	ACCESSGRANTEDHOMEWORLDTEMPORARY   Status = "ACCESS_GRANTED_HOME_WORLD_TEMPORARY"
	ACCESSGRANTEDLINKEDWORLD          Status = "ACCESS_GRANTED_LINKED_WORLD"
	ACCESSGRANTEDLINKEDWORLDTEMPORARY Status = "ACCESS_GRANTED_LINKED_WORLD_TEMPORARY"
)

// APIKeyData defines model for APIKeyData.
type APIKeyData struct {
	// Apikey The api to set for the user
	Apikey string `json:"apikey"`

	// Primary Set if the user should be the primary user of that particular platform. There can only be one per platform per account. Setting a new primary user will override the old one
	Primary bool `json:"primary"`
}

// APIKeyName defines model for APIKeyName.
type APIKeyName struct {
	// Name The apikey name the user has to name their apikey if apikey name is enforced
	Name string `json:"name"`
}

// AccessType defines model for AccessType.
type AccessType string

// Account defines model for Account.
type Account struct {
	Access       *[]string `json:"access,omitempty"`
	Age          int       `json:"age"`
	Commander    bool      `json:"commander"`
	Created      time.Time `json:"created"`
	DailyAp      *int      `json:"daily_ap,omitempty"`
	DbCreated    time.Time `bun:",nullzero,notnull,default:current_timestamp,scanonly" json:"db_created,omitempty"`
	DbUpdated    time.Time `bun:",nullzero,notnull,default:current_timestamp" json:"db_updated,omitempty"`
	Expired      *bool     `bun:"-" json:"expired,omitempty"`
	FractalLevel *int      `json:"fractal_level,omitempty"`
	GuildLeader  *[]string `json:"guild_leader,omitempty"`
	Guilds       *[]string `json:"guilds,omitempty"`
	Id           string    `json:"id"`
	MonthlyAp    *int      `json:"monthly_ap,omitempty"`
	Name         string    `json:"name"`
	UserID       int64     `json:"user_id"`
	World        int       `json:"world"`
	WorldStatus  *Status   `bun:"-" json:"world_status,omitempty"`
	WvwRank      *int      `bun:"wv_w_rank" json:"wvw_rank,omitempty"`
}

// Ban defines model for Ban.
type Ban struct {
	Reason string    `json:"reason"`
	Until  time.Time `json:"until"`
	UserID int64     `json:"user_id"`
}

// ChannelMetadata defines model for ChannelMetadata.
type ChannelMetadata struct {
	Name  string                `json:"name"`
	Users []ChannelUserMetadata `json:"users"`
}

// ChannelUserMetadata defines model for ChannelUserMetadata.
type ChannelUserMetadata struct {
	Deafened  bool   `json:"deafened"`
	Id        string `json:"id"`
	Muted     bool   `json:"muted"`
	Name      string `json:"name"`
	Streaming bool   `json:"streaming"`
}

// Configuration defines model for Configuration.
type Configuration struct {
	ExpirationTime                int `json:"expiration_time"`
	TemporaryAccessExpirationTime int `json:"temporary_access_expiration_time"`

	// WorldLinks List of worlds links
	WorldLinks map[string]WorldLinks `json:"world_links"`
}

// EphemeralAssociation defines model for EphemeralAssociation.
type EphemeralAssociation struct {
	AccessType *AccessType `bun:"-" json:"access_type,omitempty"`
	Until      *time.Time  `json:"until,omitempty"`
	UserID     int64       `json:"user_id,omitempty"`
	World      *int        `json:"world,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error            string `json:"error"`
	SafeDisplayError string `json:"safe-display-error"`
}

// PlatformLink defines model for PlatformLink.
type PlatformLink struct {
	DisplayName *string `json:"display_name,omitempty"`

	// PlatformId ID of the platform the user id belongs to
	PlatformID     int    `bun:",pk" json:"platform_id"`
	PlatformUserID string `bun:",pk" json:"platform_user_id"`
	Primary        bool   `json:"primary"`
	UserID         int64  `json:"user_id"`
}

// Property defines model for Property.
type Property struct {
	Name    string  `json:"name"`
	Subject *string `json:"subject,omitempty"`
	Value   string  `json:"value"`
}

// Status defines model for Status.
type Status string

// User defines model for User.
type User struct {
	Accounts              []Account              `bun:"rel:has-many,join:id=user_id" json:"accounts,omitempty"`
	Bans                  []Ban                  `bun:"rel:has-many,join:id=user_id" json:"bans,omitempty"`
	DbCreated             time.Time              `bun:",nullzero,notnull,default:current_timestamp,scanonly" json:"db_created,omitempty"`
	DbUpdated             time.Time              `bun:",nullzero,notnull,default:current_timestamp" json:"db_updated,omitempty"`
	EphemeralAssociations []EphemeralAssociation `bun:"rel:has-many,join:id=user_id" json:"ephemeral_associations,omitempty"`
	Id                    int64                  `bun:",pk,autoincrement" json:"id"`
	PlatformLinks         []PlatformLink         `bun:"rel:has-many,join:id=user_id" json:"platform_links,omitempty"`
}

// VerificationStatus defines model for VerificationStatus.
type VerificationStatus struct {
	Ban          *Ban          `json:"ban,omitempty"`
	PlatformLink *PlatformLink `json:"platform_link,omitempty"`
	Status       Status        `bun:"-" json:"status"`
}

// WorldLinks defines model for WorldLinks.
type WorldLinks = []int

// GuildIdent defines model for guild_ident.
type GuildIdent = string

// PlatformId defines model for platform_id.
type PlatformId = int

// PlatformUserId defines model for platform_user_id.
type PlatformUserId = string

// PropertyName defines model for property_name.
type PropertyName = string

// ServiceUuid defines model for service_uuid.
type ServiceUuid = string

// Subject defines model for subject.
type Subject = string

// TraitPlatformUserDisplayName defines model for trait_platform_user_display_name.
type TraitPlatformUserDisplayName = string

// TraitSecuredAuthentication defines model for trait_secured_authentication.
type TraitSecuredAuthentication = string

// TraitWorldView defines model for trait_world_view.
type TraitWorldView = int

// TraitWorldViewOptional defines model for trait_world_view_optional.
type TraitWorldViewOptional = int

// TraitErrorResp defines model for trait_error_resp.
type TraitErrorResp = Error

// PostChannelPlatformStatisticsParams defines parameters for PostChannelPlatformStatistics.
type PostChannelPlatformStatisticsParams struct {
	World TraitWorldView `form:"world" json:"world"`
}

// GetV1ConfigurationParams defines parameters for GetV1Configuration.
type GetV1ConfigurationParams struct {
	World *TraitWorldViewOptional `form:"world,omitempty" json:"world,omitempty"`
}

// GetPlatformUserUpdatesParams defines parameters for GetPlatformUserUpdates.
type GetPlatformUserUpdatesParams struct {
	World TraitWorldView `form:"world" json:"world"`
}

// GetPlatformUserParams defines parameters for GetPlatformUser.
type GetPlatformUserParams struct {
	// DisplayName Display name of the user of the platform user. Will be stored as the latest used display name by that user
	DisplayName *TraitPlatformUserDisplayName `form:"display_name,omitempty" json:"display_name,omitempty"`
}

// PutPlatformUserAPIKeyParams defines parameters for PutPlatformUserAPIKey.
type PutPlatformUserAPIKeyParams struct {
	// SkipRequirements Skip the variuse apikey requirements that might be in place
	SkipRequirements *bool                   `form:"skip-requirements,omitempty" json:"skip-requirements,omitempty"`
	World            *TraitWorldViewOptional `form:"world,omitempty" json:"world,omitempty"`
}

// GetPlatformUserAPIKeyNameParams defines parameters for GetPlatformUserAPIKeyName.
type GetPlatformUserAPIKeyNameParams struct {
	World *TraitWorldViewOptional `form:"world,omitempty" json:"world,omitempty"`
}

// GetVerificationPlatformUserUpdatesParams defines parameters for GetVerificationPlatformUserUpdates.
type GetVerificationPlatformUserUpdatesParams struct {
	World TraitWorldView `form:"world" json:"world"`
}

// GetVerificationPlatformUserStatusParams defines parameters for GetVerificationPlatformUserStatus.
type GetVerificationPlatformUserStatusParams struct {
	World TraitWorldView `form:"world" json:"world"`

	// DisplayName Display name of the user of the platform user. Will be stored as the latest used display name by that user
	DisplayName *TraitPlatformUserDisplayName `form:"display_name,omitempty" json:"display_name,omitempty"`
}

// PostVerificationPlatformUserRefreshParams defines parameters for PostVerificationPlatformUserRefresh.
type PostVerificationPlatformUserRefreshParams struct {
	World TraitWorldView `form:"world" json:"world"`
}

// PutVerificationPlatformUserTemporaryParams defines parameters for PutVerificationPlatformUserTemporary.
type PutVerificationPlatformUserTemporaryParams struct {
	World TraitWorldView `form:"world" json:"world"`
}

// PostChannelPlatformStatisticsJSONRequestBody defines body for PostChannelPlatformStatistics for application/json ContentType.
type PostChannelPlatformStatisticsJSONRequestBody = ChannelMetadata

// PutPlatformUserAPIKeyJSONRequestBody defines body for PutPlatformUserAPIKey for application/json ContentType.
type PutPlatformUserAPIKeyJSONRequestBody = APIKeyData

// PutPlatformUserBanJSONRequestBody defines body for PutPlatformUserBan for application/json ContentType.
type PutPlatformUserBanJSONRequestBody = Ban

// PutVerificationPlatformUserTemporaryJSONRequestBody defines body for PutVerificationPlatformUserTemporary for application/json ContentType.
type PutVerificationPlatformUserTemporaryJSONRequestBody = EphemeralAssociation

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostChannelPlatformStatisticsWithBody request with any body
	PostChannelPlatformStatisticsWithBody(ctx context.Context, platformId PlatformId, channel string, params *PostChannelPlatformStatisticsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChannelPlatformStatistics(ctx context.Context, platformId PlatformId, channel string, params *PostChannelPlatformStatisticsParams, body PostChannelPlatformStatisticsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Configuration request
	GetV1Configuration(ctx context.Context, params *GetV1ConfigurationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGuildUsers request
	GetGuildUsers(ctx context.Context, guildIdent GuildIdent, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformUserUpdates request
	GetPlatformUserUpdates(ctx context.Context, platformId PlatformId, params *GetPlatformUserUpdatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformUser request
	GetPlatformUser(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *GetPlatformUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPlatformUserAPIKeyWithBody request with any body
	PutPlatformUserAPIKeyWithBody(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PutPlatformUserAPIKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPlatformUserAPIKey(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PutPlatformUserAPIKeyParams, body PutPlatformUserAPIKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformUserAPIKeyName request
	GetPlatformUserAPIKeyName(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *GetPlatformUserAPIKeyNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPlatformUserBanWithBody request with any body
	PutPlatformUserBanWithBody(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPlatformUserBan(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, body PutPlatformUserBanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPlatformUserRefresh request
	PostPlatformUserRefresh(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceProperties request
	GetServiceProperties(ctx context.Context, serviceUuid ServiceUuid, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceSubjectProperties request
	GetServiceSubjectProperties(ctx context.Context, serviceUuid ServiceUuid, subject Subject, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutServiceSubjectProperties request
	PutServiceSubjectProperties(ctx context.Context, serviceUuid ServiceUuid, subject Subject, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceSubjectProperty request
	GetServiceSubjectProperty(ctx context.Context, serviceUuid ServiceUuid, subject Subject, propertyName PropertyName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutServiceSubjectProperty request
	PutServiceSubjectProperty(ctx context.Context, serviceUuid ServiceUuid, subject Subject, propertyName PropertyName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVerificationPlatformUserUpdates request
	GetVerificationPlatformUserUpdates(ctx context.Context, platformId PlatformId, params *GetVerificationPlatformUserUpdatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVerificationPlatformUserStatus request
	GetVerificationPlatformUserStatus(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *GetVerificationPlatformUserStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVerificationPlatformUserRefresh request
	PostVerificationPlatformUserRefresh(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PostVerificationPlatformUserRefreshParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutVerificationPlatformUserTemporaryWithBody request with any body
	PutVerificationPlatformUserTemporaryWithBody(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PutVerificationPlatformUserTemporaryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutVerificationPlatformUserTemporary(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PutVerificationPlatformUserTemporaryParams, body PutVerificationPlatformUserTemporaryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostChannelPlatformStatisticsWithBody(ctx context.Context, platformId PlatformId, channel string, params *PostChannelPlatformStatisticsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChannelPlatformStatisticsRequestWithBody(c.Server, platformId, channel, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChannelPlatformStatistics(ctx context.Context, platformId PlatformId, channel string, params *PostChannelPlatformStatisticsParams, body PostChannelPlatformStatisticsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChannelPlatformStatisticsRequest(c.Server, platformId, channel, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Configuration(ctx context.Context, params *GetV1ConfigurationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ConfigurationRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGuildUsers(ctx context.Context, guildIdent GuildIdent, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGuildUsersRequest(c.Server, guildIdent)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformUserUpdates(ctx context.Context, platformId PlatformId, params *GetPlatformUserUpdatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformUserUpdatesRequest(c.Server, platformId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformUser(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *GetPlatformUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformUserRequest(c.Server, platformId, platformUserId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPlatformUserAPIKeyWithBody(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PutPlatformUserAPIKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPlatformUserAPIKeyRequestWithBody(c.Server, platformId, platformUserId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPlatformUserAPIKey(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PutPlatformUserAPIKeyParams, body PutPlatformUserAPIKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPlatformUserAPIKeyRequest(c.Server, platformId, platformUserId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformUserAPIKeyName(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *GetPlatformUserAPIKeyNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformUserAPIKeyNameRequest(c.Server, platformId, platformUserId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPlatformUserBanWithBody(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPlatformUserBanRequestWithBody(c.Server, platformId, platformUserId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPlatformUserBan(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, body PutPlatformUserBanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPlatformUserBanRequest(c.Server, platformId, platformUserId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlatformUserRefresh(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlatformUserRefreshRequest(c.Server, platformId, platformUserId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceProperties(ctx context.Context, serviceUuid ServiceUuid, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServicePropertiesRequest(c.Server, serviceUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceSubjectProperties(ctx context.Context, serviceUuid ServiceUuid, subject Subject, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceSubjectPropertiesRequest(c.Server, serviceUuid, subject)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceSubjectProperties(ctx context.Context, serviceUuid ServiceUuid, subject Subject, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceSubjectPropertiesRequest(c.Server, serviceUuid, subject)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceSubjectProperty(ctx context.Context, serviceUuid ServiceUuid, subject Subject, propertyName PropertyName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceSubjectPropertyRequest(c.Server, serviceUuid, subject, propertyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceSubjectProperty(ctx context.Context, serviceUuid ServiceUuid, subject Subject, propertyName PropertyName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceSubjectPropertyRequest(c.Server, serviceUuid, subject, propertyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVerificationPlatformUserUpdates(ctx context.Context, platformId PlatformId, params *GetVerificationPlatformUserUpdatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVerificationPlatformUserUpdatesRequest(c.Server, platformId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVerificationPlatformUserStatus(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *GetVerificationPlatformUserStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVerificationPlatformUserStatusRequest(c.Server, platformId, platformUserId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVerificationPlatformUserRefresh(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PostVerificationPlatformUserRefreshParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVerificationPlatformUserRefreshRequest(c.Server, platformId, platformUserId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVerificationPlatformUserTemporaryWithBody(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PutVerificationPlatformUserTemporaryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVerificationPlatformUserTemporaryRequestWithBody(c.Server, platformId, platformUserId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutVerificationPlatformUserTemporary(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PutVerificationPlatformUserTemporaryParams, body PutVerificationPlatformUserTemporaryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutVerificationPlatformUserTemporaryRequest(c.Server, platformId, platformUserId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostChannelPlatformStatisticsRequest calls the generic PostChannelPlatformStatistics builder with application/json body
func NewPostChannelPlatformStatisticsRequest(server string, platformId PlatformId, channel string, params *PostChannelPlatformStatisticsParams, body PostChannelPlatformStatisticsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChannelPlatformStatisticsRequestWithBody(server, platformId, channel, params, "application/json", bodyReader)
}

// NewPostChannelPlatformStatisticsRequestWithBody generates requests for PostChannelPlatformStatistics with any type of body
func NewPostChannelPlatformStatisticsRequestWithBody(server string, platformId PlatformId, channel string, params *PostChannelPlatformStatisticsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platform_id", runtime.ParamLocationPath, platformId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "channel", runtime.ParamLocationPath, channel)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channels/%s/%s/statistics", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "world", runtime.ParamLocationQuery, params.World); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ConfigurationRequest generates requests for GetV1Configuration
func NewGetV1ConfigurationRequest(server string, params *GetV1ConfigurationParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.World != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "world", runtime.ParamLocationQuery, *params.World); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGuildUsersRequest generates requests for GetGuildUsers
func NewGetGuildUsersRequest(server string, guildIdent GuildIdent) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guild_ident", runtime.ParamLocationPath, guildIdent)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/guilds/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlatformUserUpdatesRequest generates requests for GetPlatformUserUpdates
func NewGetPlatformUserUpdatesRequest(server string, platformId PlatformId, params *GetPlatformUserUpdatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platform_id", runtime.ParamLocationPath, platformId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/platform/%s/users/updates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "world", runtime.ParamLocationQuery, params.World); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlatformUserRequest generates requests for GetPlatformUser
func NewGetPlatformUserRequest(server string, platformId PlatformId, platformUserId PlatformUserId, params *GetPlatformUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platform_id", runtime.ParamLocationPath, platformId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "platform_user_id", runtime.ParamLocationPath, platformUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/platform/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DisplayName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "display_name", runtime.ParamLocationQuery, *params.DisplayName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPlatformUserAPIKeyRequest calls the generic PutPlatformUserAPIKey builder with application/json body
func NewPutPlatformUserAPIKeyRequest(server string, platformId PlatformId, platformUserId PlatformUserId, params *PutPlatformUserAPIKeyParams, body PutPlatformUserAPIKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPlatformUserAPIKeyRequestWithBody(server, platformId, platformUserId, params, "application/json", bodyReader)
}

// NewPutPlatformUserAPIKeyRequestWithBody generates requests for PutPlatformUserAPIKey with any type of body
func NewPutPlatformUserAPIKeyRequestWithBody(server string, platformId PlatformId, platformUserId PlatformUserId, params *PutPlatformUserAPIKeyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platform_id", runtime.ParamLocationPath, platformId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "platform_user_id", runtime.ParamLocationPath, platformUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/platform/%s/users/%s/apikey", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SkipRequirements != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip-requirements", runtime.ParamLocationQuery, *params.SkipRequirements); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.World != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "world", runtime.ParamLocationQuery, *params.World); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlatformUserAPIKeyNameRequest generates requests for GetPlatformUserAPIKeyName
func NewGetPlatformUserAPIKeyNameRequest(server string, platformId PlatformId, platformUserId PlatformUserId, params *GetPlatformUserAPIKeyNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platform_id", runtime.ParamLocationPath, platformId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "platform_user_id", runtime.ParamLocationPath, platformUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/platform/%s/users/%s/apikey/name", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.World != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "world", runtime.ParamLocationQuery, *params.World); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPlatformUserBanRequest calls the generic PutPlatformUserBan builder with application/json body
func NewPutPlatformUserBanRequest(server string, platformId PlatformId, platformUserId PlatformUserId, body PutPlatformUserBanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPlatformUserBanRequestWithBody(server, platformId, platformUserId, "application/json", bodyReader)
}

// NewPutPlatformUserBanRequestWithBody generates requests for PutPlatformUserBan with any type of body
func NewPutPlatformUserBanRequestWithBody(server string, platformId PlatformId, platformUserId PlatformUserId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platform_id", runtime.ParamLocationPath, platformId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "platform_user_id", runtime.ParamLocationPath, platformUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/platform/%s/users/%s/ban", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostPlatformUserRefreshRequest generates requests for PostPlatformUserRefresh
func NewPostPlatformUserRefreshRequest(server string, platformId PlatformId, platformUserId PlatformUserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platform_id", runtime.ParamLocationPath, platformId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "platform_user_id", runtime.ParamLocationPath, platformUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/platform/%s/users/%s/refresh", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServicePropertiesRequest generates requests for GetServiceProperties
func NewGetServicePropertiesRequest(server string, serviceUuid ServiceUuid) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_uuid", runtime.ParamLocationPath, serviceUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s/properties", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceSubjectPropertiesRequest generates requests for GetServiceSubjectProperties
func NewGetServiceSubjectPropertiesRequest(server string, serviceUuid ServiceUuid, subject Subject) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_uuid", runtime.ParamLocationPath, serviceUuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subject", runtime.ParamLocationPath, subject)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s/properties/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutServiceSubjectPropertiesRequest generates requests for PutServiceSubjectProperties
func NewPutServiceSubjectPropertiesRequest(server string, serviceUuid ServiceUuid, subject Subject) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_uuid", runtime.ParamLocationPath, serviceUuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subject", runtime.ParamLocationPath, subject)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s/properties/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceSubjectPropertyRequest generates requests for GetServiceSubjectProperty
func NewGetServiceSubjectPropertyRequest(server string, serviceUuid ServiceUuid, subject Subject, propertyName PropertyName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_uuid", runtime.ParamLocationPath, serviceUuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subject", runtime.ParamLocationPath, subject)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "property_name", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s/properties/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutServiceSubjectPropertyRequest generates requests for PutServiceSubjectProperty
func NewPutServiceSubjectPropertyRequest(server string, serviceUuid ServiceUuid, subject Subject, propertyName PropertyName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service_uuid", runtime.ParamLocationPath, serviceUuid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subject", runtime.ParamLocationPath, subject)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "property_name", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/services/%s/properties/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVerificationPlatformUserUpdatesRequest generates requests for GetVerificationPlatformUserUpdates
func NewGetVerificationPlatformUserUpdatesRequest(server string, platformId PlatformId, params *GetVerificationPlatformUserUpdatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platform_id", runtime.ParamLocationPath, platformId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/verification/platform/%s/users/updates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "world", runtime.ParamLocationQuery, params.World); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVerificationPlatformUserStatusRequest generates requests for GetVerificationPlatformUserStatus
func NewGetVerificationPlatformUserStatusRequest(server string, platformId PlatformId, platformUserId PlatformUserId, params *GetVerificationPlatformUserStatusParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platform_id", runtime.ParamLocationPath, platformId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "platform_user_id", runtime.ParamLocationPath, platformUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/verification/platform/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "world", runtime.ParamLocationQuery, params.World); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.DisplayName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "display_name", runtime.ParamLocationQuery, *params.DisplayName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVerificationPlatformUserRefreshRequest generates requests for PostVerificationPlatformUserRefresh
func NewPostVerificationPlatformUserRefreshRequest(server string, platformId PlatformId, platformUserId PlatformUserId, params *PostVerificationPlatformUserRefreshParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platform_id", runtime.ParamLocationPath, platformId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "platform_user_id", runtime.ParamLocationPath, platformUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/verification/platform/%s/users/%s/refresh", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "world", runtime.ParamLocationQuery, params.World); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutVerificationPlatformUserTemporaryRequest calls the generic PutVerificationPlatformUserTemporary builder with application/json body
func NewPutVerificationPlatformUserTemporaryRequest(server string, platformId PlatformId, platformUserId PlatformUserId, params *PutVerificationPlatformUserTemporaryParams, body PutVerificationPlatformUserTemporaryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutVerificationPlatformUserTemporaryRequestWithBody(server, platformId, platformUserId, params, "application/json", bodyReader)
}

// NewPutVerificationPlatformUserTemporaryRequestWithBody generates requests for PutVerificationPlatformUserTemporary with any type of body
func NewPutVerificationPlatformUserTemporaryRequestWithBody(server string, platformId PlatformId, platformUserId PlatformUserId, params *PutVerificationPlatformUserTemporaryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "platform_id", runtime.ParamLocationPath, platformId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "platform_user_id", runtime.ParamLocationPath, platformUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/verification/platform/%s/users/%s/temporary", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "world", runtime.ParamLocationQuery, params.World); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostChannelPlatformStatisticsWithBodyWithResponse request with any body
	PostChannelPlatformStatisticsWithBodyWithResponse(ctx context.Context, platformId PlatformId, channel string, params *PostChannelPlatformStatisticsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChannelPlatformStatisticsResponse, error)

	PostChannelPlatformStatisticsWithResponse(ctx context.Context, platformId PlatformId, channel string, params *PostChannelPlatformStatisticsParams, body PostChannelPlatformStatisticsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChannelPlatformStatisticsResponse, error)

	// GetV1ConfigurationWithResponse request
	GetV1ConfigurationWithResponse(ctx context.Context, params *GetV1ConfigurationParams, reqEditors ...RequestEditorFn) (*GetV1ConfigurationResponse, error)

	// GetGuildUsersWithResponse request
	GetGuildUsersWithResponse(ctx context.Context, guildIdent GuildIdent, reqEditors ...RequestEditorFn) (*GetGuildUsersResponse, error)

	// GetPlatformUserUpdatesWithResponse request
	GetPlatformUserUpdatesWithResponse(ctx context.Context, platformId PlatformId, params *GetPlatformUserUpdatesParams, reqEditors ...RequestEditorFn) (*GetPlatformUserUpdatesResponse, error)

	// GetPlatformUserWithResponse request
	GetPlatformUserWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *GetPlatformUserParams, reqEditors ...RequestEditorFn) (*GetPlatformUserResponse, error)

	// PutPlatformUserAPIKeyWithBodyWithResponse request with any body
	PutPlatformUserAPIKeyWithBodyWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PutPlatformUserAPIKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPlatformUserAPIKeyResponse, error)

	PutPlatformUserAPIKeyWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PutPlatformUserAPIKeyParams, body PutPlatformUserAPIKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPlatformUserAPIKeyResponse, error)

	// GetPlatformUserAPIKeyNameWithResponse request
	GetPlatformUserAPIKeyNameWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *GetPlatformUserAPIKeyNameParams, reqEditors ...RequestEditorFn) (*GetPlatformUserAPIKeyNameResponse, error)

	// PutPlatformUserBanWithBodyWithResponse request with any body
	PutPlatformUserBanWithBodyWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPlatformUserBanResponse, error)

	PutPlatformUserBanWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, body PutPlatformUserBanJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPlatformUserBanResponse, error)

	// PostPlatformUserRefreshWithResponse request
	PostPlatformUserRefreshWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, reqEditors ...RequestEditorFn) (*PostPlatformUserRefreshResponse, error)

	// GetServicePropertiesWithResponse request
	GetServicePropertiesWithResponse(ctx context.Context, serviceUuid ServiceUuid, reqEditors ...RequestEditorFn) (*GetServicePropertiesResponse, error)

	// GetServiceSubjectPropertiesWithResponse request
	GetServiceSubjectPropertiesWithResponse(ctx context.Context, serviceUuid ServiceUuid, subject Subject, reqEditors ...RequestEditorFn) (*GetServiceSubjectPropertiesResponse, error)

	// PutServiceSubjectPropertiesWithResponse request
	PutServiceSubjectPropertiesWithResponse(ctx context.Context, serviceUuid ServiceUuid, subject Subject, reqEditors ...RequestEditorFn) (*PutServiceSubjectPropertiesResponse, error)

	// GetServiceSubjectPropertyWithResponse request
	GetServiceSubjectPropertyWithResponse(ctx context.Context, serviceUuid ServiceUuid, subject Subject, propertyName PropertyName, reqEditors ...RequestEditorFn) (*GetServiceSubjectPropertyResponse, error)

	// PutServiceSubjectPropertyWithResponse request
	PutServiceSubjectPropertyWithResponse(ctx context.Context, serviceUuid ServiceUuid, subject Subject, propertyName PropertyName, reqEditors ...RequestEditorFn) (*PutServiceSubjectPropertyResponse, error)

	// GetVerificationPlatformUserUpdatesWithResponse request
	GetVerificationPlatformUserUpdatesWithResponse(ctx context.Context, platformId PlatformId, params *GetVerificationPlatformUserUpdatesParams, reqEditors ...RequestEditorFn) (*GetVerificationPlatformUserUpdatesResponse, error)

	// GetVerificationPlatformUserStatusWithResponse request
	GetVerificationPlatformUserStatusWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *GetVerificationPlatformUserStatusParams, reqEditors ...RequestEditorFn) (*GetVerificationPlatformUserStatusResponse, error)

	// PostVerificationPlatformUserRefreshWithResponse request
	PostVerificationPlatformUserRefreshWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PostVerificationPlatformUserRefreshParams, reqEditors ...RequestEditorFn) (*PostVerificationPlatformUserRefreshResponse, error)

	// PutVerificationPlatformUserTemporaryWithBodyWithResponse request with any body
	PutVerificationPlatformUserTemporaryWithBodyWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PutVerificationPlatformUserTemporaryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVerificationPlatformUserTemporaryResponse, error)

	PutVerificationPlatformUserTemporaryWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PutVerificationPlatformUserTemporaryParams, body PutVerificationPlatformUserTemporaryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVerificationPlatformUserTemporaryResponse, error)
}

type PostChannelPlatformStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON500      *TraitErrorResp
}

// Status returns HTTPResponse.Status
func (r PostChannelPlatformStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChannelPlatformStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Configuration
}

// Status returns HTTPResponse.Status
func (r GetV1ConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGuildUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON500      *TraitErrorResp
}

// Status returns HTTPResponse.Status
func (r GetGuildUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGuildUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformUserUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON500      *TraitErrorResp
}

// Status returns HTTPResponse.Status
func (r GetPlatformUserUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformUserUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON500      *TraitErrorResp
}

// Status returns HTTPResponse.Status
func (r GetPlatformUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPlatformUserAPIKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *TraitErrorResp
}

// Status returns HTTPResponse.Status
func (r PutPlatformUserAPIKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPlatformUserAPIKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformUserAPIKeyNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *APIKeyName
	JSON500      *TraitErrorResp
}

// Status returns HTTPResponse.Status
func (r GetPlatformUserAPIKeyNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformUserAPIKeyNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPlatformUserBanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON500      *TraitErrorResp
}

// Status returns HTTPResponse.Status
func (r PutPlatformUserBanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPlatformUserBanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPlatformUserRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON500      *TraitErrorResp
}

// Status returns HTTPResponse.Status
func (r PostPlatformUserRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPlatformUserRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServicePropertiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Property
	JSON400      *Error
	JSON500      *TraitErrorResp
}

// Status returns HTTPResponse.Status
func (r GetServicePropertiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServicePropertiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceSubjectPropertiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Property
	JSON500      *TraitErrorResp
}

// Status returns HTTPResponse.Status
func (r GetServiceSubjectPropertiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceSubjectPropertiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutServiceSubjectPropertiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Property
	JSON400      *Error
	JSON500      *TraitErrorResp
}

// Status returns HTTPResponse.Status
func (r PutServiceSubjectPropertiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutServiceSubjectPropertiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceSubjectPropertyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Property
	JSON500      *TraitErrorResp
}

// Status returns HTTPResponse.Status
func (r GetServiceSubjectPropertyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceSubjectPropertyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutServiceSubjectPropertyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON500      *TraitErrorResp
}

// Status returns HTTPResponse.Status
func (r PutServiceSubjectPropertyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutServiceSubjectPropertyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVerificationPlatformUserUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VerificationStatus
	JSON500      *TraitErrorResp
}

// Status returns HTTPResponse.Status
func (r GetVerificationPlatformUserUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVerificationPlatformUserUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVerificationPlatformUserStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VerificationStatus
	JSON500      *TraitErrorResp
}

// Status returns HTTPResponse.Status
func (r GetVerificationPlatformUserStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVerificationPlatformUserStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVerificationPlatformUserRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]VerificationStatus
	JSON500      *TraitErrorResp
}

// Status returns HTTPResponse.Status
func (r PostVerificationPlatformUserRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVerificationPlatformUserRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutVerificationPlatformUserTemporaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int
	JSON500      *TraitErrorResp
}

// Status returns HTTPResponse.Status
func (r PutVerificationPlatformUserTemporaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutVerificationPlatformUserTemporaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostChannelPlatformStatisticsWithBodyWithResponse request with arbitrary body returning *PostChannelPlatformStatisticsResponse
func (c *ClientWithResponses) PostChannelPlatformStatisticsWithBodyWithResponse(ctx context.Context, platformId PlatformId, channel string, params *PostChannelPlatformStatisticsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChannelPlatformStatisticsResponse, error) {
	rsp, err := c.PostChannelPlatformStatisticsWithBody(ctx, platformId, channel, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChannelPlatformStatisticsResponse(rsp)
}

func (c *ClientWithResponses) PostChannelPlatformStatisticsWithResponse(ctx context.Context, platformId PlatformId, channel string, params *PostChannelPlatformStatisticsParams, body PostChannelPlatformStatisticsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChannelPlatformStatisticsResponse, error) {
	rsp, err := c.PostChannelPlatformStatistics(ctx, platformId, channel, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChannelPlatformStatisticsResponse(rsp)
}

// GetV1ConfigurationWithResponse request returning *GetV1ConfigurationResponse
func (c *ClientWithResponses) GetV1ConfigurationWithResponse(ctx context.Context, params *GetV1ConfigurationParams, reqEditors ...RequestEditorFn) (*GetV1ConfigurationResponse, error) {
	rsp, err := c.GetV1Configuration(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ConfigurationResponse(rsp)
}

// GetGuildUsersWithResponse request returning *GetGuildUsersResponse
func (c *ClientWithResponses) GetGuildUsersWithResponse(ctx context.Context, guildIdent GuildIdent, reqEditors ...RequestEditorFn) (*GetGuildUsersResponse, error) {
	rsp, err := c.GetGuildUsers(ctx, guildIdent, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGuildUsersResponse(rsp)
}

// GetPlatformUserUpdatesWithResponse request returning *GetPlatformUserUpdatesResponse
func (c *ClientWithResponses) GetPlatformUserUpdatesWithResponse(ctx context.Context, platformId PlatformId, params *GetPlatformUserUpdatesParams, reqEditors ...RequestEditorFn) (*GetPlatformUserUpdatesResponse, error) {
	rsp, err := c.GetPlatformUserUpdates(ctx, platformId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformUserUpdatesResponse(rsp)
}

// GetPlatformUserWithResponse request returning *GetPlatformUserResponse
func (c *ClientWithResponses) GetPlatformUserWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *GetPlatformUserParams, reqEditors ...RequestEditorFn) (*GetPlatformUserResponse, error) {
	rsp, err := c.GetPlatformUser(ctx, platformId, platformUserId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformUserResponse(rsp)
}

// PutPlatformUserAPIKeyWithBodyWithResponse request with arbitrary body returning *PutPlatformUserAPIKeyResponse
func (c *ClientWithResponses) PutPlatformUserAPIKeyWithBodyWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PutPlatformUserAPIKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPlatformUserAPIKeyResponse, error) {
	rsp, err := c.PutPlatformUserAPIKeyWithBody(ctx, platformId, platformUserId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPlatformUserAPIKeyResponse(rsp)
}

func (c *ClientWithResponses) PutPlatformUserAPIKeyWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PutPlatformUserAPIKeyParams, body PutPlatformUserAPIKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPlatformUserAPIKeyResponse, error) {
	rsp, err := c.PutPlatformUserAPIKey(ctx, platformId, platformUserId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPlatformUserAPIKeyResponse(rsp)
}

// GetPlatformUserAPIKeyNameWithResponse request returning *GetPlatformUserAPIKeyNameResponse
func (c *ClientWithResponses) GetPlatformUserAPIKeyNameWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *GetPlatformUserAPIKeyNameParams, reqEditors ...RequestEditorFn) (*GetPlatformUserAPIKeyNameResponse, error) {
	rsp, err := c.GetPlatformUserAPIKeyName(ctx, platformId, platformUserId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformUserAPIKeyNameResponse(rsp)
}

// PutPlatformUserBanWithBodyWithResponse request with arbitrary body returning *PutPlatformUserBanResponse
func (c *ClientWithResponses) PutPlatformUserBanWithBodyWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPlatformUserBanResponse, error) {
	rsp, err := c.PutPlatformUserBanWithBody(ctx, platformId, platformUserId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPlatformUserBanResponse(rsp)
}

func (c *ClientWithResponses) PutPlatformUserBanWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, body PutPlatformUserBanJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPlatformUserBanResponse, error) {
	rsp, err := c.PutPlatformUserBan(ctx, platformId, platformUserId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPlatformUserBanResponse(rsp)
}

// PostPlatformUserRefreshWithResponse request returning *PostPlatformUserRefreshResponse
func (c *ClientWithResponses) PostPlatformUserRefreshWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, reqEditors ...RequestEditorFn) (*PostPlatformUserRefreshResponse, error) {
	rsp, err := c.PostPlatformUserRefresh(ctx, platformId, platformUserId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlatformUserRefreshResponse(rsp)
}

// GetServicePropertiesWithResponse request returning *GetServicePropertiesResponse
func (c *ClientWithResponses) GetServicePropertiesWithResponse(ctx context.Context, serviceUuid ServiceUuid, reqEditors ...RequestEditorFn) (*GetServicePropertiesResponse, error) {
	rsp, err := c.GetServiceProperties(ctx, serviceUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServicePropertiesResponse(rsp)
}

// GetServiceSubjectPropertiesWithResponse request returning *GetServiceSubjectPropertiesResponse
func (c *ClientWithResponses) GetServiceSubjectPropertiesWithResponse(ctx context.Context, serviceUuid ServiceUuid, subject Subject, reqEditors ...RequestEditorFn) (*GetServiceSubjectPropertiesResponse, error) {
	rsp, err := c.GetServiceSubjectProperties(ctx, serviceUuid, subject, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceSubjectPropertiesResponse(rsp)
}

// PutServiceSubjectPropertiesWithResponse request returning *PutServiceSubjectPropertiesResponse
func (c *ClientWithResponses) PutServiceSubjectPropertiesWithResponse(ctx context.Context, serviceUuid ServiceUuid, subject Subject, reqEditors ...RequestEditorFn) (*PutServiceSubjectPropertiesResponse, error) {
	rsp, err := c.PutServiceSubjectProperties(ctx, serviceUuid, subject, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceSubjectPropertiesResponse(rsp)
}

// GetServiceSubjectPropertyWithResponse request returning *GetServiceSubjectPropertyResponse
func (c *ClientWithResponses) GetServiceSubjectPropertyWithResponse(ctx context.Context, serviceUuid ServiceUuid, subject Subject, propertyName PropertyName, reqEditors ...RequestEditorFn) (*GetServiceSubjectPropertyResponse, error) {
	rsp, err := c.GetServiceSubjectProperty(ctx, serviceUuid, subject, propertyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceSubjectPropertyResponse(rsp)
}

// PutServiceSubjectPropertyWithResponse request returning *PutServiceSubjectPropertyResponse
func (c *ClientWithResponses) PutServiceSubjectPropertyWithResponse(ctx context.Context, serviceUuid ServiceUuid, subject Subject, propertyName PropertyName, reqEditors ...RequestEditorFn) (*PutServiceSubjectPropertyResponse, error) {
	rsp, err := c.PutServiceSubjectProperty(ctx, serviceUuid, subject, propertyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceSubjectPropertyResponse(rsp)
}

// GetVerificationPlatformUserUpdatesWithResponse request returning *GetVerificationPlatformUserUpdatesResponse
func (c *ClientWithResponses) GetVerificationPlatformUserUpdatesWithResponse(ctx context.Context, platformId PlatformId, params *GetVerificationPlatformUserUpdatesParams, reqEditors ...RequestEditorFn) (*GetVerificationPlatformUserUpdatesResponse, error) {
	rsp, err := c.GetVerificationPlatformUserUpdates(ctx, platformId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVerificationPlatformUserUpdatesResponse(rsp)
}

// GetVerificationPlatformUserStatusWithResponse request returning *GetVerificationPlatformUserStatusResponse
func (c *ClientWithResponses) GetVerificationPlatformUserStatusWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *GetVerificationPlatformUserStatusParams, reqEditors ...RequestEditorFn) (*GetVerificationPlatformUserStatusResponse, error) {
	rsp, err := c.GetVerificationPlatformUserStatus(ctx, platformId, platformUserId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVerificationPlatformUserStatusResponse(rsp)
}

// PostVerificationPlatformUserRefreshWithResponse request returning *PostVerificationPlatformUserRefreshResponse
func (c *ClientWithResponses) PostVerificationPlatformUserRefreshWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PostVerificationPlatformUserRefreshParams, reqEditors ...RequestEditorFn) (*PostVerificationPlatformUserRefreshResponse, error) {
	rsp, err := c.PostVerificationPlatformUserRefresh(ctx, platformId, platformUserId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVerificationPlatformUserRefreshResponse(rsp)
}

// PutVerificationPlatformUserTemporaryWithBodyWithResponse request with arbitrary body returning *PutVerificationPlatformUserTemporaryResponse
func (c *ClientWithResponses) PutVerificationPlatformUserTemporaryWithBodyWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PutVerificationPlatformUserTemporaryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutVerificationPlatformUserTemporaryResponse, error) {
	rsp, err := c.PutVerificationPlatformUserTemporaryWithBody(ctx, platformId, platformUserId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVerificationPlatformUserTemporaryResponse(rsp)
}

func (c *ClientWithResponses) PutVerificationPlatformUserTemporaryWithResponse(ctx context.Context, platformId PlatformId, platformUserId PlatformUserId, params *PutVerificationPlatformUserTemporaryParams, body PutVerificationPlatformUserTemporaryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutVerificationPlatformUserTemporaryResponse, error) {
	rsp, err := c.PutVerificationPlatformUserTemporary(ctx, platformId, platformUserId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutVerificationPlatformUserTemporaryResponse(rsp)
}

// ParsePostChannelPlatformStatisticsResponse parses an HTTP response from a PostChannelPlatformStatisticsWithResponse call
func ParsePostChannelPlatformStatisticsResponse(rsp *http.Response) (*PostChannelPlatformStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChannelPlatformStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TraitErrorResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1ConfigurationResponse parses an HTTP response from a GetV1ConfigurationWithResponse call
func ParseGetV1ConfigurationResponse(rsp *http.Response) (*GetV1ConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Configuration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGuildUsersResponse parses an HTTP response from a GetGuildUsersWithResponse call
func ParseGetGuildUsersResponse(rsp *http.Response) (*GetGuildUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGuildUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TraitErrorResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPlatformUserUpdatesResponse parses an HTTP response from a GetPlatformUserUpdatesWithResponse call
func ParseGetPlatformUserUpdatesResponse(rsp *http.Response) (*GetPlatformUserUpdatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformUserUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TraitErrorResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPlatformUserResponse parses an HTTP response from a GetPlatformUserWithResponse call
func ParseGetPlatformUserResponse(rsp *http.Response) (*GetPlatformUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TraitErrorResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutPlatformUserAPIKeyResponse parses an HTTP response from a PutPlatformUserAPIKeyWithResponse call
func ParsePutPlatformUserAPIKeyResponse(rsp *http.Response) (*PutPlatformUserAPIKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPlatformUserAPIKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TraitErrorResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPlatformUserAPIKeyNameResponse parses an HTTP response from a GetPlatformUserAPIKeyNameWithResponse call
func ParseGetPlatformUserAPIKeyNameResponse(rsp *http.Response) (*GetPlatformUserAPIKeyNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformUserAPIKeyNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest APIKeyName
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TraitErrorResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutPlatformUserBanResponse parses an HTTP response from a PutPlatformUserBanWithResponse call
func ParsePutPlatformUserBanResponse(rsp *http.Response) (*PutPlatformUserBanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPlatformUserBanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TraitErrorResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostPlatformUserRefreshResponse parses an HTTP response from a PostPlatformUserRefreshWithResponse call
func ParsePostPlatformUserRefreshResponse(rsp *http.Response) (*PostPlatformUserRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPlatformUserRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TraitErrorResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetServicePropertiesResponse parses an HTTP response from a GetServicePropertiesWithResponse call
func ParseGetServicePropertiesResponse(rsp *http.Response) (*GetServicePropertiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServicePropertiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Property
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TraitErrorResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetServiceSubjectPropertiesResponse parses an HTTP response from a GetServiceSubjectPropertiesWithResponse call
func ParseGetServiceSubjectPropertiesResponse(rsp *http.Response) (*GetServiceSubjectPropertiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceSubjectPropertiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Property
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TraitErrorResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutServiceSubjectPropertiesResponse parses an HTTP response from a PutServiceSubjectPropertiesWithResponse call
func ParsePutServiceSubjectPropertiesResponse(rsp *http.Response) (*PutServiceSubjectPropertiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutServiceSubjectPropertiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Property
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TraitErrorResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetServiceSubjectPropertyResponse parses an HTTP response from a GetServiceSubjectPropertyWithResponse call
func ParseGetServiceSubjectPropertyResponse(rsp *http.Response) (*GetServiceSubjectPropertyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceSubjectPropertyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Property
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TraitErrorResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutServiceSubjectPropertyResponse parses an HTTP response from a PutServiceSubjectPropertyWithResponse call
func ParsePutServiceSubjectPropertyResponse(rsp *http.Response) (*PutServiceSubjectPropertyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutServiceSubjectPropertyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TraitErrorResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetVerificationPlatformUserUpdatesResponse parses an HTTP response from a GetVerificationPlatformUserUpdatesWithResponse call
func ParseGetVerificationPlatformUserUpdatesResponse(rsp *http.Response) (*GetVerificationPlatformUserUpdatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVerificationPlatformUserUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VerificationStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TraitErrorResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetVerificationPlatformUserStatusResponse parses an HTTP response from a GetVerificationPlatformUserStatusWithResponse call
func ParseGetVerificationPlatformUserStatusResponse(rsp *http.Response) (*GetVerificationPlatformUserStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVerificationPlatformUserStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VerificationStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TraitErrorResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostVerificationPlatformUserRefreshResponse parses an HTTP response from a PostVerificationPlatformUserRefreshWithResponse call
func ParsePostVerificationPlatformUserRefreshResponse(rsp *http.Response) (*PostVerificationPlatformUserRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVerificationPlatformUserRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []VerificationStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TraitErrorResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutVerificationPlatformUserTemporaryResponse parses an HTTP response from a PutVerificationPlatformUserTemporaryWithResponse call
func ParsePutVerificationPlatformUserTemporaryResponse(rsp *http.Response) (*PutVerificationPlatformUserTemporaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutVerificationPlatformUserTemporaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest TraitErrorResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xc6W/bOBb/VwjtAvNFjjud7mIRoB/cxts1pnWzOaa76AQCLT3bnNCkhqScegP/7wse",
	"umlbaq5mpt9iicfj4+/dT7kNYr5KOQOmZHB8G6RY4BUoEObXIiM0iUgCTOmfCchYkFQRzoLj4PJycoK4",
	"QAyvAPE5MoODMCD6ZYrVMggD/S44rq0TBgJ+z4iAJDhWIoMwkPESVlhvoDapHi6VIGwRbLdhkFKs5lys",
	"IpK0KXiBXqNPMJNEQYh+RK/RBeCVTAFfh+gleo1OiIy52EFTdeUONBGmYAGiTlQmQTjK9u2QD+t5dMFT",
	"EGoT2eX8W9TG9FtfgliTGKIs8/E2Y+T3DBBJ9NWqJSA33M/M2lo9ychmv0Gsdhwwf9tvTSUwUVGd/wmR",
	"KcUlN+vHPbFvCzDrE+tp+d/5WubhEfpEKEUzQFJxAQnC0gyiWIFUekiCkuqCsw1SS2zeiJyBv2cgNuVB",
	"a+R1OZ2EOBOQRDhTS2CKxNgexbFxCTgxm7n1R/VhX8PPGy5oEq0J3BS7NA5hRvSVpubiETeXgumhXfas",
	"utU0yJQzCUaR2T1ACC4i/UI/izlTTrHhNKWOM8PfpOViufpfBcyD4+Avw1JVDu1bORzrJe2GdUCNWZJy",
	"whS6wRJlDM8oIMWRXoKCArThmUCaTyBV0LrUVy9+amN0FMcgJVL8GhgibI0pSYIGA7kgwJRZ4UV7hYmd",
	"hMxYLdup4GuSQGIl0Z5JTxudTn6GzQlWhgFOyxDLS5ySa9i0F79YAsIp0aeUoNCci0KKgrAJKq3eyAoL",
	"zzrnoBCpSKBc8owmWtqMINppFeHECqVYKBJnFItCUI/QxRIEoBgzxBnd6PmcAUqhHGN+4DjmGVNH6ByU",
	"ImyBMGJwU9/nRos7X4MQJLFkcJro5cqDzTingFlgoZfD/3POrfK8V8UUblXbNnTsnjrNVGe3X185Zl+D",
	"0zAFt5ZaF/HiIRH5MDKvTSASAZtzEUPSvp3GGQwJXroNIi/M49sAWLbSw//18cM4+vTx7P1JEAbvJ9Of",
	"xyfu51VzpzD4MuA4JYOYJ7AANoAvSuCBwgtz9lmmzzowBI3sPXnwaIgwykLBSno0WLErFgJv9G+8AJ/e",
	"CLU3tMJMa87ydXG1YRALwAqMudQAwkprbqxgoMgKfChPMKGbCKf+3ZJZ1G9Fza8FH+iHA3lN0kGuKwdG",
	"2WiyrcbtwNaQZZT+DwQPGVf67zCBOc6oOo4zIYCpSJMgFV6loYwx01JkbiKZRVmafPtUG2LhS2ph3LrO",
	"HtibCxwrTCMKa6D+q7QuLrVWtxcWzcye+CWJd9iKM7Xcg7dcl7QmVhzZ4j4JU39/Vd5lvoy7TGeLLyWI",
	"yYlewlpl77bWNEmFVSYPGdRzO0rPWt9EArNrz5qdru5mHbkFtk2FZpxU52lpVRAWPkUujlVNULLHpwPf",
	"YNbWSQKwcyParGaK0O4K5M430zh6GYtYQsKcVt/Z3i4xY0A/gMKJ1xfYC6g6pvdduttHk1zs1UK9zyjl",
	"G+0hvrZo6wAJ4Dkwr37YI2aZ2jVjJ0OkEoBX+odn3h542r3CktDqUt5jczYni0wU4UD9wEYfmndGUfoF",
	"VsEq5QKLTWSNa9RplhVzSti1tctJQqyaP61RsA8In/QS780KLY/6PZFKe3xmG4nsPi0GNFjZJLzD2eoH",
	"8bF4nC5hBQLTkZQ8Jjs47ZZXzjvad+yKH/X4GqKjdd6n4rc+JpnIqI2//HFbQvAcBi4MHuwa1rxeM8w7",
	"13dxp87x1wjz6IJGhqAdsuxLRk1OWrmCwiknOnyhnC20b37oWnIi3dUc9ojS651ZKa8f1tinAoPue1WD",
	"N+N+5S5cWyXetwXzpNXqubycuP122ymlTQ+jVklVtd6tMc3gMGCdVrejfWSdF15SHk6N3r4dn59HJ+Pp",
	"ZHwSXU5/nn78NA3C/Pm7s9H0YnwS1aKuxrtaELZnZnQx/nD68Wx09t/9a/jGOfpGb99+vJxeRNOPF25K",
	"a8j4P6eTM8/zyfSX0ftJi0z39s1oOvVMOhv/+3JyNv4wdnt+GF/cKczUoPPqch18dvdo8mi16cXcZygk",
	"gB4vsRysMNuEv3HCjknyOoe8PssMs+4Uv7HS+nTUfg+GHz4Yzh2XCJeeS3eIeP2eJ8VMd7PSxbSFOFOc",
	"sFjACpiqG9XCre3EqZqj8YQcagcWPpvzCwgyd/nv0v7UNeDMhrkdNEiNZX0Z1S9J0Diem+w7YiWw8CRa",
	"qqFPM+Y0KXmiNud6b8cLwALEKFPLolBgfB7zuITfUqnU3gFhc262I4rqN+8yQhP0CQuJXqIq99HodKLd",
	"AxDSepXrl5oongLDKQmOg5+OXhy90D4OVktDy3D94zC2ka4c3lYcoe3w1j3fDjVjiFQkbtV4P3urbm5i",
	"vyqR/8rKzYZVL63D8FbRaXsVBimXnlL0W04pxAqV50QzLCFBnLmigS1zoHJ5hFmCJF6bLPnKVCuWRCou",
	"SIwpSjORcgk6vtRCYO5mkminmUvlEgs5dM9L5lp+gVRveLK5txpTMwvTEGsXnNXqXS991R+NJFcWetja",
	"l93op13zC0qH7aLXNgz+ZknsMrNS0NsaOow0NBMgC/BA5h0ohFFtrP6lMGGELZAACmvMFNKiq62Lfq9B",
	"IjLGbJXI1bzRjKsWTN6B+uXHeibGf0P3A5DaRjsvpDNbPaXEO9yoMaN1ldNT8suK8PbKXbJNmg9vK50l",
	"22GRdPTfuND3iW1EXmSBXC1UADXcO0KjIm1FN6HRHr+anFHkKgm/BijvurB1wRkgASu+hgTNBS+j/h8k",
	"qphQD0KMFbg0ND8gOExA48EEdem0tTE/kBiaJSJWY9pmnqeEzR0UQV+8VduTCoTl1qphVA2Xhtbl3421",
	"95wtUMoptbpEKgR5P4BRIhADWet3Boz5ah6MVJM0l8WwRwfLEyPh1Yt/HOCxjnN4pkLEOIK1XhPhNSbU",
	"9F0kmbD3YGwzSkEQntwFYWFgvfDPefmhN+Tu7gt1geltM1e2PWAPa21OP0iUgMKEHkTmnxCSj6aceiKl",
	"lR3tjK497XJfi7Zh2Sv0jR7a72SEQZopf2dSW0ZGpxNkW3waoUJWkxHb4xO0rr+xxTVJjQFeY0EyWTT5",
	"OHd/ZTSb6XlakcVSaeeDME1S2ZnZ6JYzGYbqdF/nXFmJvHqYGKbSUHYP4cuzEvg7ic4wL0b0UNqNvrAN",
	"wgJyACVIcT2u2Q6mfRRBYhPm1FvD9ir+SuPaA5qAyi7fDcFT6cSvhLHLGz7yUXdp8DeYuQjwB4kWNy/z",
	"7k8buc1Au4l5QHRIob/B7IESPiaR+j3Jc5/aVMBcgFw+ERS9Sct/ag0rEUaOtrx9QPsTCVbYZCgFqEww",
	"+3kBgxsbL9q3cwWiPmGJJZoBsHxFSI7QlCttBYg0ndAKXwPCaA43SELMWeLPcFZhfuY492Qu/lNBzOX3",
	"5PC2+nXLdlivi+y2y5QWKcL9eaBzO+q0OuhOvO5Wosr7H9pFj30m9g+pVPqa4trnToVpPAyY4a1rITkU",
	"h7thB1OIDjrndvg3j6Cvz/+88nx/aFQhB4kYV2jpSjl5lgeSIk37hNA4bDDynqIDQWcnQJxmzw0Qf3g/",
	"pY9OGN7WPufsrSM2nTXE5rt+eHb6oYPvWfsYuK9C2XRWJx3Qo+CL0r4waeCm2TTwZ1UL60rPxyNVmqpb",
	"7qs4VdtRHrn65OlD+l6Leka1qO6o7l2YssXpGoZdt1cPCJ/nM/7cCP4jZyzvt9x1F0A/YcrpXnvrvipN",
	"5RHUB01Y7ZL4e0pedXJ3fbLfKw56jlWtO0lI0YT1jGQk++Y7y06zneJwUTD8YQoX/g8EOlcyOtPg+38v",
	"9SuxLM2VzoKsgSG8MqUePi9UyXOVvUpbuhGWakP65yuNUx1m5qKUCeq60eXxcIhTcjTHQi7JGkQK+Foe",
	"xXylbd7/AwAA//+KDHjhDEwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
